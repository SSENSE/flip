'use strict';

var _templateObject = _taggedTemplateLiteral(['color: blue;'], ['color: blue;']),
    _templateObject2 = _taggedTemplateLiteral([''], ['']),
    _templateObject3 = _taggedTemplateLiteral(['background-color: blue;'], ['background-color: blue;']),
    _templateObject4 = _taggedTemplateLiteral(['color: red;'], ['color: red;']),
    _templateObject5 = _taggedTemplateLiteral(['\n      color: blue;\n      > h1 { font-size: 4rem; }\n    '], ['\n      color: blue;\n      > h1 { font-size: 4rem; }\n    ']),
    _templateObject6 = _taggedTemplateLiteral(['\n      color: ', ';\n    '], ['\n      color: ', ';\n    ']),
    _templateObject7 = _taggedTemplateLiteral(['background-color: green;'], ['background-color: green;']);

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

var _expect = require('expect');

var _expect2 = _interopRequireDefault(_expect);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _taggedTemplateLiteral(strings, raw) { return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var styled = void 0;

describe('extending components', function () {
  beforeEach(function () {
    styled = (0, _utils.resetStyled)();
  });

  it('should generate a single class if only parent has styles', function () {
    var Parent = styled.div(_templateObject);
    var Child = styled(Parent)(_templateObject2);

    var p = new _vue2.default(Parent).$mount();
    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('.a {color: blue;}');
  });

  it('should generate a single class if only child has styles', function () {
    var Parent = styled.div(_templateObject);
    var Child = styled(Parent)(_templateObject2);

    var p = new _vue2.default(Parent).$mount();
    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('.a {color: blue;}');
  });

  it('should generate a new class for the child with the added rules', function () {
    var Parent = styled.div(_templateObject3);
    var Child = styled(Parent)(_templateObject4);

    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('.a {color: red;}');
  });

  it('should generate different classes for both parent and child', function () {
    var Parent = styled.div(_templateObject);
    var Child = styled(Parent)(_templateObject4);

    var p = new _vue2.default(Parent).$mount();
    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('.a {color: blue;} .b {color: red;}');
  });

  it('should keep nested rules to the child', function () {
    var Parent = styled.div(_templateObject5);
    var Child = styled(Parent)(_templateObject4);

    var p = new _vue2.default(Parent).$mount();
    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('.a {color: blue;}.a > h1 {font-size: 4rem;} .b {color: red;}');
  });

  it('should keep default props from parent', function () {
    var parentProps = {
      color: {
        type: String,
        default: 'red'
      }
    };

    var Parent = styled('div', parentProps)(_templateObject6, function (props) {
      return props.color;
    });

    var Child = styled(Parent)(_templateObject7);

    var p = new _vue2.default(Parent).$mount();
    var c = new _vue2.default(Child).$mount();

    (0, _utils.expectCSSMatches)('\n      .a {color: red;}\n      .b {background-color: green;}\n    ');
  });

  it('should keep prop types from parent', function () {
    var parentProps = {
      color: {
        type: String
      }
    };

    var Parent = styled.div(_templateObject6, function (props) {
      return props.color;
    });

    var Child = styled(Parent)(_templateObject7);

    var c = new _vue2.default(Child).$mount();
    var p = new _vue2.default(Parent).$mount();

    (0, _expect2.default)(c.$props).toEqual(p.$props);
  });
});